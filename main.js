/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const plugin_name = 'koncham-treadmills';
const view_type = 'treadmills';
const view_name = 'treadmills';
let max_char = 120;
let tags_treadmill = ['#a-curr', '#a-todo', '#i-idea', '#i-mull', '#a-wait', '#i-ripe', '#i-cook', '#a-done'];
class konchamTreadmills extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.initView = () => {
            if (this.app.workspace.getLeavesOfType(view_type).length) {
                return;
            }
            this.app.workspace.getRightLeaf(false).setViewState({
                type: view_type,
                active: true,
            });
        };
        this.handleChange = () => __awaiter(this, void 0, void 0, function* () {
            this.view.initialize();
        });
    }
    onunload() {
        this.app.workspace.detachLeavesOfType(view_type);
        console.log('unloading plugin: ' + plugin_name);
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin: ' + plugin_name);
            this.registerView(view_type, (leaf) => (this.view = new TreadmillsView(leaf, this)));
            this.registerEvent(this.app.workspace.on('active-leaf-change', this.handleChange));
            this.registerEvent(this.app.workspace.on('layout-ready', this.handleChange));
            this.registerEvent(this.app.workspace.on('layout-change', this.handleChange));
            this.registerEvent(this.app.metadataCache.on('changed', this.handleChange));
            if (this.app.workspace.layoutReady) {
                this.initView();
            }
            else {
                this.registerEvent(this.app.workspace.on('layout-ready', this.initView));
            }
            this.addCommand({
                id: 'log-treadmills-note',
                name: 'log treadmills in note',
                // mch_todo remove before release
                hotkeys: [{ "modifiers": [], "key": "F23" }],
                callback: () => this.logTreadmillsNote(),
            });
            this.addCommand({
                id: 'show-treadmills-view',
                name: 'show treadmills view',
                callback: () => this.showTreadmillsView(),
            });
            this.addCommand({
                id: 'switch-item',
                name: 'Open Item Switcher',
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (leaf) {
                        if (!checking) {
                            new itemSwitchModal(this.app, this.getTreadmillsNoteData()).open();
                        }
                        return true;
                    }
                    return false;
                }
            });
        });
    }
    showTreadmillsView() {
        this.app.workspace.iterateAllLeaves((leaf) => {
            if (leaf.getViewState()['type'] == view_type) {
                this.app.workspace.revealLeaf(leaf);
            }
        });
    }
    getTreadmillsNoteData() {
        let view = this.app.workspace.activeLeaf.view;
        let file = this.app.workspace.getActiveFile();
        let file_cache = this.app.metadataCache.getFileCache(file);
        let tmill_data_raw;
        if ('tags' in file_cache) {
            tmill_data_raw = Object.values(file_cache.tags);
            tmill_data_raw = tmill_data_raw.filter(item => (item.position.start.col == 0));
            tmill_data_raw = tmill_data_raw.filter(item => (tags_treadmill.includes(item.tag)));
            tmill_data_raw = tmill_data_raw.filter(isSectionHead);
        }
        let tmill_data_interface = [];
        if (tmill_data_raw) {
            for (const [key, value] of Object.entries(tmill_data_raw)) {
                if (view instanceof obsidian.MarkdownView && tags_treadmill.includes(value.tag)) {
                    let line_num = value.position.start.line;
                    let line = view.editor.getLine(line_num);
                    let start_position = line.search(" ");
                    let task_name = line.substring(start_position, start_position + max_char);
                    tmill_data_interface.push({
                        rung: value.tag,
                        title: task_name,
                        line: line_num,
                        start: start_position
                    });
                }
            }
        }
        tmill_data_interface.sort(sortDefault);
        return (tmill_data_interface);
        function isSectionHead(item) {
            let line_num = item.position.start.line;
            if (view instanceof obsidian.MarkdownView) {
                if (line_num == 0) {
                    return true;
                }
                else if (view.editor.getLine(line_num - 1) === '') {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        function sortDefault(item1, item2) {
            let treadmill_order = tags_treadmill.indexOf(item1.rung) - tags_treadmill.indexOf(item2.rung);
            if (treadmill_order == 0) {
                item1.title.localeCompare(item2.title);
            }
            else {
                return treadmill_order;
            }
        }
    }
    logTreadmillsNote() {
        console.log(this.getTreadmillsNoteData());
    }
}
// I've used large parts of the code from
// (recent-files plugin)[https://github.com/tgrosinger/recent-files-obsidian]
class TreadmillsView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.initialize = () => {
            const file = this.app.workspace.getActiveFile();
            if (file == null) {
                this.createContentEmpty('not applicable');
            }
            else {
                const view = this.app.workspace.activeLeaf.view;
                let treadmills_data = this.plugin.getTreadmillsNoteData();
                if (view instanceof obsidian.MarkdownView && treadmills_data.length) {
                    this.createContentData(treadmills_data);
                }
                else if (view instanceof obsidian.MarkdownView) {
                    this.createContentEmpty('no treadmills');
                }
                else {
                    this.createContentEmpty('not applicable');
                }
            }
        };
        this.plugin = plugin;
        this.initialize();
    }
    createContentData(treadmills_data) {
        const rootEl = createDiv({ cls: 'nav-folder mod-root koncham-treadmills' });
        treadmills_data.forEach((item) => {
            const navFile = rootEl.createDiv({ cls: 'nav-file' });
            const navFileTitle = navFile.createDiv({ cls: 'nav-file-title' });
            let displaytext = item.rung + " -- " + item.title;
            navFileTitle.createDiv({
                cls: 'nav-file-title-content',
                text: displaytext,
            });
            navFileTitle.setAttr("data-line", item.line);
            navFileTitle.setAttr("data-char", item.start);
            const contentEl = this.containerEl.children[1];
            contentEl.empty();
            contentEl.appendChild(rootEl);
            navFileTitle.onClickEvent(() => {
                let line_num = parseInt(navFileTitle.getAttr('data-line'));
                let char_num = parseInt(navFileTitle.getAttr('data-char'));
                let view = this.app.workspace.activeLeaf.view;
                if (view instanceof obsidian.MarkdownView) {
                    let editor = view.editor;
                    editor.focus();
                    editor.setSelection({ line: line_num, ch: 0 }, { line: line_num, ch: char_num + max_char });
                    editor.focus();
                }
            });
        });
    }
    createContentEmpty(message) {
        const rootEl = createDiv({
            cls: 'pane-empty',
            text: "-- " + message + " --"
        });
        const contentEl = this.containerEl.children[1];
        contentEl.empty();
        contentEl.appendChild(rootEl);
    }
    getViewType() {
        return view_type;
    }
    getDisplayText() {
        return view_name;
    }
    getIcon() {
        return 'double-down-arrow-glyph';
    }
    onHeaderMenu(menu) {
        menu
            .addItem((item) => {
            item
                .setTitle('close')
                .setIcon('cross')
                .onClick(() => {
                this.app.workspace.detachLeavesOfType(view_type);
            });
        });
        menu.setNoIcon();
    }
}
class itemSwitchModal extends obsidian.FuzzySuggestModal {
    constructor(app, items) {
        super(app);
        this.app = app;
        this.items = items;
    }
    getItems() {
        return this.items;
    }
    getItemText(item) {
        return item.rung + " -- " + item.title;
    }
    onChooseItem(item, evt) {
        let view = this.app.workspace.activeLeaf.view;
        if (view instanceof obsidian.MarkdownView) {
            let editor = view.editor;
            editor.setSelection({ line: item.line, ch: item.start + 1 });
        }
    }
}

module.exports = konchamTreadmills;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
